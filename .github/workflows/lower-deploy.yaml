---
name: Lower Deploy

on:
  workflow_call:
    inputs:
      # Required Inputs
      environment:
        type: string
        description: 'Environment to deploy to'
        required: true
      project-type:
        description: 'Project type (java or reactjs)'
        required: true
        type: string

      # Optional Inputs
      app-project-root:
        type: string
        required: false
        description: path to project root directory
      docker-platforms:
        type: string
        description:
          'Comma-separated Docker platforms to build for (default: linux/amd64)'
        required: false
        default: 'linux/amd64'
      iac-project-root:
        description: path to iac
        required: false
        type: string
      java-version:
        type: string
        description: 'Java version to use for the app (default: 17)'
        required: false
        default: '17'
      project-name:
        description: 'Name of the project (defaults to the repository name)'
        required: false
        type: string
      pre-build-commands:
        description: 'Commands to be run before the Docker Build step'
        required: false
        type: string
      dockerfile-path:
        description: 'Path to dockerfile (ex: app/Dockerfile)'
        required: false
        type: string

    secrets:
      DOCKER_RW_USER:
        required: true
      DOCKER_RW_PASS:
        required: true

jobs:
  ## Parse Project Details
  parse-project-details:
    runs-on: ubuntu-latest
    outputs:
      project-name: ${{ steps.project-name.outputs.result }}
      dockerfile-path: ${{ steps.dockerfile-path.outputs.result }}
    steps:
      - id: project-name
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fullRepository = "${{ github.repository }}"
            const projectName = fullRepository.split("/")[1]
            console.log("${{ inputs.project-name }}" == "" ? projectName : "${{ inputs.project-name }}")
            return "${{ inputs.project-name }}" == "" ? projectName : "${{ inputs.project-name }}"
      - id: dockerfile-path
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const dockerfilePath = "${{ inputs.dockerfile-path }}" == "" ? "Dockerfile" : "${{ inputs.dockerfile-path }}"
            console.log(dockerfilePath)
            return dockerfilePath

  # Build and push image
  image-ci:
    runs-on: ubuntu-latest
    needs: parse-project-details
    env:
      IMAGE_REPO: indurivarun
      IMAGE_PATH: actions.demo
    steps:
      # Authenticate to Docker
      - name: Docker Login
        if: ${{ inputs.app-project-root == '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_RW_USER }}
          password: ${{ secrets.DOCKER_RW_PASS }}

      # Checkout source code
      - name: Checkout
        if: ${{ inputs.app-project-root == '' }}
        uses: actions/checkout@v4

      # Authenticate with Artifactory Cloud Maven
      #- name: Maven Authenticate
      #  if:
      #    ${{ inputs.project-type == 'java' && inputs.app-project-root != '' }}
      #  uses: 
      #  with:
      #    artifactory-username: ${{ secrets.ORG_JFROG_RO_USER }}
      #    artifactory-password: ${{ secrets.ORG_JFROG_RO_TOKEN }}
      #    package-type: maven
      #    repository: v-maven

      # Pull settings and build file
      #- name: Copy Maven Settings
      #  if:
      #    ${{ inputs.project-type == 'java' && inputs.app-project-root == '' }}
      #  working-directory: /
      #  run: |
      #    cp ~/.m2/settings.xml settings.xml

      # Authenticate with Artifactory Cloud NPM
      #- name: NPM Authenticate
      #  if:
      #    ${{ inputs.project-type == 'reactjs' && inputs.app-project-root == '' }}
      #  uses: 
      #  with:
      #    artifactory-username: ${{ secrets.ORG_JFROG_RO_USER }}
      #    artifactory-password: ${{ secrets.ORG_JFROG_RO_TOKEN }}
      #    package-type: npm
      #    repository: v-npm

      #- name: Copy npmrc
      #  if:
      #    ${{ inputs.project-type == 'reactjs' && inputs.app-project-root == '' }}
      #  working-directory: ${{ inputs.app-project-root }}
      #  run: |
      #    cp ~/.npmrc .npmrc

      - name: Run Pre-Build Commands
        if:
          ${{ inputs.app-project-root == '' && inputs.pre-build-commands != '' }}
        working-directory: /
        run: |
          ${{ inputs.pre-build-commands }}

      - name: Setup Buildx
        if: ${{ inputs.app-project-root == '' }}
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ inputs.docker-platforms }}

      - name: Build and Push Image
        if: ${{ inputs.app-project-root == '' }}
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ inputs.docker-platforms }}
          file: ${{ needs.parse-project-details.outputs.dockerfile-path }}
          push: true
          tags: ${{ env.IMAGE_REPO }}/${{ env.IMAGE_PATH }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy
  